# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-30 15:36
from __future__ import unicode_literals

import django.contrib.postgres.fields.hstore
from django.contrib.postgres.operations import HStoreExtension
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields

from mystery_shopping.companies.models import CompanyElement, Company


def save_section(section, parent):
    element = CompanyElement(element_name=section.name, element_type='Sec»õiune',
                             tenant=section.tenant, parent=parent)

    element.additional_info = {'old_section_id': section.pk}

    element.save()


def save_entity(entity, parent):
    element = CompanyElement(element_name=entity.name, element_type='Entitate',
                             tenant=entity.tenant, parent=parent)

    element.additional_info = {'old_entity_id': entity.pk,
                               'address': entity.address,
                               'coordinates': entity.coordinates}

    if entity.city:
        element.additional_info['city'] = entity.city.name
    if entity.sector:
        element.additional_info['city'] = entity.sector.name

    element.save()

    for section in entity.sections.all():
        save_section(section, element)


def save_department(department, parent):
    element = CompanyElement(element_name=department.name, element_type='Departament',
                             tenant=department.tenant, parent=parent)

    element.additional_info = {'old_department_id': department.pk}

    element.save()

    for entity in department.entities.all():
        save_entity(entity, element)


def save_company(company):
    element = CompanyElement(element_name=company.name, element_type='Companie', tenant=company.tenant,
                             logo=company.logo)

    element.additional_info = {'old_company_id': company.pk,
                               'contact_person': company.contact_person,
                               'contact_phone': company.contact_phone,
                               'contact_email': company.contact_email,
                               'contact_position': company.contact_position,
                               'domain': company.domain}

    if company.industry:
        element.additional_info['industry'] = company.industry.name
    if company.subindustry:
        element.additional_info['subindustry'] = company.subindustry.name
    if company.country:
        element.additional_info['country'] = company.country.name

    element.save()

    for department in company.departments.all():
        save_department(department, element)


def migrate_companies(*args):
    for company in Company.objects.all():
        save_company(company)


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0001_initial'),
        ('companies', '0006_company_subindustry'),
    ]

    operations = [
        HStoreExtension(),
        migrations.CreateModel(
            name='CompanyElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element_name', models.CharField(max_length=100)),
                ('element_type', models.CharField(max_length=100)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('additional_info', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent',
                 mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                            related_name='children', to='companies.CompanyElement')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants.Tenant')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('tree', django.db.models.manager.Manager()),
            ],
        ),
        migrations.RunPython(migrate_companies)
    ]

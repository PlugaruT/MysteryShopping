# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-01-02 15:51
from __future__ import unicode_literals

from django.contrib.contenttypes.models import ContentType
from django.db import migrations

from mystery_shopping.companies.models import CompanyElement
from mystery_shopping.projects.models import ResearchMethodology, Project, Evaluation


class ResearchMethodologyReassign:
    def __init__(self, research_methodology):
        self.research_methodology = research_methodology
        self.reassign()

    def add_section_to_research_methodology(self, place_to_assess):
        try:
            company_element = CompanyElement.objects.get(additional_info__old_section_id=place_to_assess.place_id)
            self.research_methodology.company_elements.add(company_element)
        except:
            pass

    def add_entity_to_research_methodology(self, place_to_assess):
        try:
            company_element = CompanyElement.objects.get(additional_info__old_entity_id=place_to_assess.place_id)
            self.research_methodology.company_elements.add(company_element)
        except:
            pass

    def add_department_to_research_methodology(self, place_to_assess):
        try:
            company_element = CompanyElement.objects.get(additional_info__old_department_id=place_to_assess.place_id)
            self.research_methodology.company_elements.add(company_element)
        except:
            pass

    def reassign(self):
        for place_to_assess in self.research_methodology.places_to_assess.all():
            if place_to_assess.place_type.model_class() == ContentType(app_label='companies', model='section').model_class():
                self.add_section_to_research_methodology(place_to_assess)
            elif place_to_assess.place_type.model_class() == ContentType(app_label='companies', model='entity').model_class():
                self.add_entity_to_research_methodology(place_to_assess)
            elif place_to_assess.place_type.model_class() == ContentType(app_label='companies', model='department').model_class():
                self.add_department_to_research_methodology(place_to_assess)


class ProjectReassignCompany:
    def __init__(self, project):
        self.project = project
        self.reassign()

    def reassign(self):
        company_element = CompanyElement.objects.get(additional_info__old_company_id=self.project.company.id)
        self.project.company_new = company_element
        self.project.save()


class EvaluationReassignCompanyElement:
    def __init__(self, evaluation):
        self.evaluation = evaluation
        self.reassign()

    def set_section(self):
        company_element = CompanyElement.objects.get(additional_info__old_section_id=self.evaluation.section.id)
        self.evaluation.company_element = company_element
        self.evaluation.save()

    def set_entity(self):
        company_element = CompanyElement.objects.get(additional_info__old_entity_id=self.evaluation.entity.id)
        self.evaluation.company_element = company_element
        self.evaluation.save()

    def reassign(self):
        if self.evaluation.section is not None:
            self.set_section()
        elif self.evaluation.entity is not None:
            self.set_entity()


def migrate_research_methodologies():
    research_methodologies = ResearchMethodology.objects.all()
    for research_methodology in research_methodologies:
        ResearchMethodologyReassign(research_methodology)


def migrate_projects():
    projects = Project.objects.all()
    for project in projects:
        ProjectReassignCompany(project)


def migrate_evaluations():
    evaluations = Evaluation.objects.all()
    for evaluation in evaluations:
        EvaluationReassignCompanyElement(evaluation)


def migrate_all(*args):
    migrate_research_methodologies()
    migrate_projects()
    migrate_evaluations()


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0007_auto_20161230_1529'),
    ]

    operations = [
        migrations.RunPython(migrate_all)
    ]
